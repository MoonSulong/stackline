import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../redux/store';
import { product, fetchRetailData } from '../../mock/mockAPI';

export interface RetailState {
  retail: product[],
  product: product | null,
  loading: boolean,
  error: boolean,
}

const initialState: RetailState = {
  retail: [],
  product: null,
  loading: false,
  error: false,
};

// The function below is called a thunk and allows us to perform async logic.
export const fetchAsync = createAsyncThunk(
  'retail/fetchData',
  async () => {
    const response = await fetchRetailData();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const retailSlice = createSlice({
  name: 'retail',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // setRetail: (state, action: PayloadAction<product[]>) => {
    //   state.retail = action.payload;
    //   state.product = action.payload[0]
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.loading = true;
        state.error = false;
      })
      .addCase(fetchAsync.fulfilled, (state, action: PayloadAction<product[]>) => {
        state.retail = action.payload;
        state.product = action.payload[0];
        state.loading = false;
        state.error = false;
      })
      .addCase(fetchAsync.rejected, (state) => {
        state.loading = false;
        state.error = true;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProduct = (state: RootState) => state.retail.product;

export default retailSlice.reducer;
